# Emissary HTTP Connection Factory Configuration
#
# This file configures both client-side HTTP connections and server-side PKI authentication

# ============================================================================
# SSL/TLS Configuration (Client and Server)
# ============================================================================

# Path to the keystore containing the client/server certificate and private key
# javax.net.ssl.keyStore = "/path/to/keystore.jks"

# Keystore password (can be a direct password, file://path/to/password, or ${ENV_VAR})
# javax.net.ssl.keyStorePassword = "changeit"

# Keystore type (default: JKS)
# javax.net.ssl.keyStoreType = "JKS"

# Path to the truststore containing trusted CA certificates
# javax.net.ssl.trustStore = "/path/to/truststore.jks"

# Truststore password (can be a direct password, file://path/to/password, or ${ENV_VAR})
# javax.net.ssl.trustStorePassword = "changeit"

# Truststore type (default: JKS)
# javax.net.ssl.trustStoreType = "JKS"

# SSL context type (default: TLS)
# emissary.sslcontext.type = "TLS"

# Use noop hostname verifier (ONLY for testing - bypasses hostname verification)
# https.useNoopHostnameVerifier = "false"

# ============================================================================
# PKI Authentication Configuration (Server-side)
# ============================================================================

# Enable PKI (certificate-based) authentication for Jetty endpoints
# When enabled, clients must present valid X.509 certificates to authenticate
# When disabled, traditional username/password authentication is used
# Default: false
PKI_AUTHENTICATION_ENABLED = "false"

# Require client certificates for all SSL connections
# - true: Client MUST present a certificate (connections without certs are rejected)
# - false: Client MAY present a certificate (allows fallback to other auth methods)
# Default: false
# Note: Only applies when PKI_AUTHENTICATION_ENABLED = true
PKI_CLIENT_CERT_REQUIRED = "false"

# Allow any valid certificate that passes SSL/TLS validation
# - true: Any certificate signed by a trusted CA in the truststore is accepted
# - false: Only certificates explicitly mapped in PKI_USERS_FILE or matching PKI_TRUSTED_DN_PATTERN are accepted
# Default: false
PKI_ALLOW_ANY_VALID_CERT = "false"

# Default role assigned to authenticated PKI users when no specific mapping exists
# Default: emissary
PKI_DEFAULT_ROLE = "emissary"

# Path to PKI users mapping file (format: certificate_dn = role1,role2,role3)
# See pki-users.properties.example for format details
# PKI_USERS_FILE = "/path/to/pki-users.properties"

# Trusted certificate DN patterns (regex)
# Users with certificates matching these patterns will be authenticated with PKI_DEFAULT_ROLE
# You can specify multiple patterns by repeating this configuration key
# Example patterns:
# PKI_TRUSTED_DN_PATTERN = "^CN=.*,OU=Engineering,O=Emissary,C=US$"
# PKI_TRUSTED_DN_PATTERN = "^CN=.*,OU=Operations,O=Emissary,C=US$"

# ============================================================================
# HTTP Connection Pool Configuration
# ============================================================================

# Enable HTTP keep-alive for connection reuse
# Default: true
http.keepAlive = "true"

# Maximum number of connections in the pool
# Default: 200
http.maxConnections = "200"

# User agent string for HTTP requests
# Default: emissary
http.agent = "emissary"
